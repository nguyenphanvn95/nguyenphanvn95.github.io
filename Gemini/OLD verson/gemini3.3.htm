<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luyện Dịch Tiếng Anh - Gemini Practice</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        /* Reset CSS */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            padding: 20px;
        }

        header {
            text-align: center;
            padding: 30px 20px;
            background: linear-gradient(to right, #3498db, #2c3e50);
            color: white;
            border-radius: 10px;
            margin-bottom: 25px;
        }

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .logo i {
            font-size: 2.5rem;
        }

        .logo h1 {
            font-size: 2.2rem;
            font-weight: 700;
        }

        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            max-width: 700px;
            margin: 0 auto;
        }

        .api-key-container {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
            border: 1px solid #e9ecef;
        }

        .api-key-container label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .api-key-input {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .api-key-input input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .api-key-input input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .api-key-input button {
            background: #3498db;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
        }

        .api-key-input button:hover {
            background: #2980b9;
        }

        .api-key-container small {
            display: block;
            color: #6c757d;
            margin-top: 5px;
        }

        .api-key-container a {
            color: #3498db;
            text-decoration: none;
        }

        .api-key-container a:hover {
            text-decoration: underline;
        }

        .error-message {
            color: #e74c3c;
            margin-top: 10px;
            font-weight: 500;
            display: none;
        }

        .selection-section {
            display: grid;
            grid-template-columns: 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }

        @media (min-width: 992px) {
            .selection-section {
                grid-template-columns: 1fr 1fr;
            }
        }

        .selection-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .selection-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .selection-card h2 {
            background: #2c3e50;
            color: white;
            padding: 15px 20px;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .level-options, .type-options {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            padding: 20px;
        }

        @media (min-width: 768px) {
            .level-options, .type-options {
                grid-template-columns: 1fr 1fr;
            }
        }

        .option {
            display: flex;
            gap: 15px;
            padding: 15px;
            border-radius: 10px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            cursor: pointer;
            transition: all 0.3s;
        }

        .option:hover {
            background: #e9f7fe;
            border-color: #3498db;
        }

        .option.selected {
            background: #d1ecf1;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .option-icon {
            width: 50px;
            height: 50px;
            background: #3498db;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            flex-shrink: 0;
        }

        .option-details {
            flex: 1;
        }

        .option-details h3 {
            font-size: 1.1rem;
            margin-bottom: 5px;
            color: #2c3e50;
        }

        .option-details p {
            color: #6c757d;
            font-size: 0.95rem;
            margin-bottom: 8px;
        }

        .time-indicator {
            display: inline-block;
            background: #e8f4fc;
            color: #3498db;
            padding: 3px 8px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .start-btn-container {
            text-align: center;
            margin: 30px 0;
        }

        .start-btn {
            background: linear-gradient(to right, #27ae60, #2ecc71);
            color: white;
            border: none;
            border-radius: 50px;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 5px 15px rgba(46, 204, 113, 0.4);
        }

        .start-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(46, 204, 113, 0.6);
        }

        .start-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .exercises-section {
            display: none;
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.4rem;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .exercises-list {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        @media (min-width: 768px) {
            .exercises-list {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (min-width: 992px) {
            .exercises-list {
                grid-template-columns: 1fr 1fr 1fr;
            }
        }

        .exercise-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .exercise-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .exercise-card.selected {
            border-color: #3498db;
            box-shadow: 0 0 15px rgba(52, 152, 219, 0.4);
        }

        .exercise-card h3 {
            background: #3498db;
            color: white;
            padding: 15px;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .exercise-card p {
            padding: 15px;
            color: #6c757d;
            min-height: 80px;
        }

        .exercise-meta {
            display: flex;
            gap: 10px;
            padding: 0 15px 15px;
        }

        .exercise-tag {
            background: #e8f4fc;
            color: #3498db;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .practice-section {
            display: none;
        }

        .practice-header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 10px 10px 0 0;
        }

        .exercise-title {
            font-size: 1.4rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .exercise-meta {
            display: flex;
            gap: 15px;
        }

        .exercise-tag {
            background: rgba(255, 255, 255, 0.2);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.95rem;
        }

        .practice-container {
            background: white;
            padding: 25px;
            border-radius: 0 0 10px 10px;
        }

        .original-section, .translation-section {
            margin-bottom: 30px;
        }

        .vietnamese-text {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            min-height: 150px;
            font-size: 1.1rem;
            line-height: 1.7;
        }

        .vietnamese-text .current-sentence {
            background: #fff3cd;
            padding: 2px 5px;
            border-radius: 4px;
            font-weight: 500;
        }

        .progress-container {
            height: 10px;
            background: #e9ecef;
            border-radius: 5px;
            margin: 25px 0;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(to right, #3498db, #2ecc71);
            width: 0%;
            transition: width 0.5s ease;
        }

        .progress-text {
            text-align: center;
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .current-sentence {
            background: #e8f4fc;
            border-left: 4px solid #3498db;
            padding: 15px;
            border-radius: 0 8px 8px 0;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .translation-container {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
        }

        .translation-input {
            width: 100%;
            min-height: 120px;
            padding: 15px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 1rem;
            line-height: 1.6;
            resize: vertical;
            transition: border-color 0.3s;
            margin-bottom: 15px;
        }

        .translation-input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .translation-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .translation-btn {
            flex: 1;
            min-width: 120px;
            padding: 12px 15px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .hint-btn {
            background: #f39c12;
            color: white;
        }

        .hint-btn:hover {
            background: #e67e22;
        }

        .submit-btn {
            background: #3498db;
            color: white;
        }

        .submit-btn:hover {
            background: #2980b9;
        }

        .next-btn {
            background: #27ae60;
            color: white;
        }

        .next-btn:hover {
            background: #2ecc71;
        }

        .feedback-section {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            display: none;
        }

        .feedback-title {
            font-weight: 600;
            margin-bottom: 15px;
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .feedback-content {
            line-height: 1.7;
        }

        .feedback-content p {
            margin-bottom: 10px;
        }

        .overall-feedback-container {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-top: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            display: none;
        }

        .overall-title {
            font-size: 1.4rem;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .overall-feedback {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            min-height: 150px;
        }

        .overall-actions {
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .action-btn {
            padding: 12px 30px;
            border: none;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .new-exercise-btn {
            background: #3498db;
            color: white;
        }

        .new-exercise-btn:hover {
            background: #2980b9;
        }

        .submit-all-btn {
            background: #27ae60;
            color: white;
        }

        .submit-all-btn:hover {
            background: #2ecc71;
        }

        .results-summary {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-top: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            display: none;
        }

        .results-title {
            font-size: 1.4rem;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
        }

        .results-content {
            display: grid;
            grid-template-columns: 1fr;
            gap: 30px;
        }

        @media (min-width: 768px) {
            .results-content {
                grid-template-columns: 1fr 1fr;
            }
        }

        .original-text, .translated-text {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
        }

        .original-text h3, .translated-text h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            display: none;
            animation: fadeIn 0.3s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .shortcut-hint {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 15px;
            background: #e8f4fc;
            padding: 15px;
            border-radius: 8px;
            font-size: 0.9rem;
        }

        .shortcut-hint div {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .key {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 30px;
            height: 30px;
            background: #2c3e50;
            color: white;
            border-radius: 5px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .debug-panel {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 25px;
            display: none;
        }

        .debug-toggle {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .debug-content {
            background: white;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            font-family: monospace;
            font-size: 0.9rem;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-language"></i>
                <h1>Luyện Dịch Tiếng Anh</h1>
            </div>
            <p class="subtitle">Nâng cao kỹ năng dịch thuật với trí tuệ nhân tạo Gemini</p>
        </header>

        <div class="api-key-container">
            <label for="api-key">Gemini API Key:</label>
            <div class="api-key-input">
                <input type="password" id="api-key" placeholder="Nhập API key của bạn...">
                <button id="save-api-key"><i class="fas fa-save"></i> Lưu</button>
            </div>
            <p><small>Bạn cần API key để sử dụng ứng dụng. Lấy key tại <a href="https://aistudio.google.com/" target="_blank">Google AI Studio</a>.</small></p>
            <div class="error-message" id="api-key-error"></div>
        </div>

        <div class="debug-panel" id="debug-panel" style="display:none;">
            <button class="debug-toggle" id="debug-toggle">
                <i class="fas fa-bug"></i> Hiển thị thông tin gỡ lỗi
            </button>
            <div class="debug-content" id="debug-content"></div>
        </div> 

        <div class="selection-section">
            <div class="selection-card">
                <h2><i class="fas fa-chart-line"></i> Chọn Mức Độ</h2>
                <div class="level-options">
                    <div class="option" data-level="beginner">
                        <div class="option-icon">
                            <i class="fas fa-seedling"></i>
                        </div>
                        <div class="option-details">
                            <h3>Beginner</h3>
                            <p>Hoàn hảo cho người mới bắt đầu. Câu đơn giản và từ vựng cơ bản.</p>
                            <span class="time-indicator">15-20 phút/bài</span>
                        </div>
                    </div>
                    <div class="option" data-level="intermediate">
                        <div class="option-icon">
                            <i class="fas fa-tree"></i>
                        </div>
                        <div class="option-details">
                            <h3>Intermediate</h3>
                            <p>Cho người học sẵn sàng với câu phức tạp hơn và từ vựng đa dạng.</p>
                            <span class="time-indicator">20-30 phút/bài</span>
                        </div>
                    </div>
                    <div class="option" data-level="advanced">
                        <div class="option-icon">
                            <i class="fas fa-mountain"></i>
                        </div>
                        <div class="option-details">
                            <h3>Advanced</h3>
                            <p>Thử thách bản thân với văn bản phức tạp và từ vựng chuyên nghiệp.</p>
                            <span class="time-indicator">30-40 phút/bài</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="selection-card">
                <h2><i class="fas fa-file-alt"></i> Chọn Thể Loại</h2>
                <div class="type-options">
                    <div class="option" data-type="emails">
                        <div class="option-icon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <div class="option-details">
                            <h3>Emails</h3>
                            <p>Thư từ công việc và cá nhân</p>
                        </div>
                    </div>
                    <div class="option" data-type="diaries">
                        <div class="option-icon">
                            <i class="fas fa-book"></i>
                        </div>
                        <div class="option-details">
                            <h3>Diaries</h3>
                            <p>Suy ngẫm và trải nghiệm cá nhân</p>
                        </div>
                    </div>
                    <div class="option" data-type="essays">
                        <div class="option-icon">
                            <i class="fas fa-pen"></i>
                        </div>
                        <div class="option-details">
                            <h3>Essays</h3>
                            <p>Bài viết học thuật và quan điểm</p>
                        </div>
                    </div>
                    <div class="option" data-type="articles">
                        <div class="option-icon">
                            <i class="fas fa-newspaper"></i>
                        </div>
                        <div class="option-details">
                            <h3>Articles</h3>
                            <p>Nội dung báo chí và tạp chí</p>
                        </div>
                    </div>
                    <div class="option" data-type="stories">
                        <div class="option-icon">
                            <i class="fas fa-book-open"></i>
                        </div>
                        <div class="option-details">
                            <h3>Stories</h3>
                            <p>Truyện ngắn và tường thuật</p>
                        </div>
                    </div>
                    <div class="option" data-type="reports">
                        <div class="option-icon">
                            <i class="fas fa-chart-bar"></i>
                        </div>
                        <div class="option-details">
                            <h3>Reports</h3>
                            <p>Báo cáo kinh doanh và nghiên cứu</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="start-btn-container">
            <button id="start-practice" class="start-btn" disabled>
                <i class="fas fa-play"></i> Tải Bài Tập
            </button>
        </div>

        <div class="exercises-section" id="exercises-section" style="display: none;">
            <h2 class="section-title"><i class="fas fa-list"></i> Chọn Bài Tập:</h2>
            <div class="exercises-list" id="exercises-list">
                <!-- Bài tập sẽ được thêm động ở đây -->
            </div>
        </div>

        <div class="practice-section" id="practice-section">
            <div class="practice-header">
                <div class="exercise-title" id="exercise-title">Đang tạo bài tập...</div>
                <div class="exercise-meta">
                    <div class="exercise-tag" id="exercise-level">...</div>
                    <div class="exercise-tag" id="exercise-type">...</div>
                </div>
            </div>
            
            <div class="practice-container">
                <div class="original-section">
                    <h3 class="section-title"><i class="fas fa-book"></i> Bài viết mẫu:</h3>
                    <div class="vietnamese-text" id="vietnamese-text">
                        Đang tải nội dung...
                    </div>
                </div>
                
                <div class="progress-container">
                    <div class="progress-bar" id="progress-bar" style="width: 0%"></div>
                </div>
                <div class="progress-text" id="progress-text">Câu 0/0</div>
                
                <div class="translation-section">
                    <div id="current-sentence-container">
                        <h3 class="section-title"><i class="fas fa-pencil-alt"></i> Câu đang dịch:</h3>
                        <div class="current-sentence" id="current-sentence"></div>
                    </div>
                    
                    <div class="translation-container">
                        <h3 class="section-title"><i class="fas fa-exchange-alt"></i> Dịch sang tiếng Anh:</h3>
                        <textarea class="translation-input" id="current-translation" placeholder="Nhập bản dịch của bạn..."></textarea>
                        
                        <!-- Thêm phần hiển thị phím tắt -->
                        <div class="shortcut-hint">
                            <div>
                                <span class="key">H</span> Gợi ý từ khóa
                            </div>
                            <div>
                                <span class="key">Enter</span> Kiểm tra
                            </div>
                            <div>
                                <span class="key">Shift</span> + <span class="key">Enter</span> Câu tiếp
                            </div>
                            <div>
                                <span class="key">Tab</span> Focus ô dịch
                            </div>
                        </div>
                        
                        <div class="translation-actions">
                            <button class="translation-btn hint-btn" id="hint-btn">
                                <i class="fas fa-lightbulb"></i> Gợi ý từ khóa
                            </button>
                            <button class="translation-btn submit-btn" id="submit-btn">
                                <i class="fas fa-check"></i> Kiểm tra
                            </button>
                            <button class="translation-btn next-btn" id="next-btn">
                                <i class="fas fa-arrow-right"></i> Câu tiếp
                            </button>
                        </div>
                        
                        <div class="feedback-section" id="feedback-section">
                            <div class="feedback-title"><i class="fas fa-comment-alt"></i> Nhận xét:</div>
                            <div class="feedback-content markdown-content" id="feedback-content"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="overall-feedback-container" id="overall-feedback-container">
                <h3 class="overall-title"><i class="fas fa-star"></i> Đánh Giá Tổng Thể</h3>
                <div class="overall-feedback markdown-content" id="overall-feedback">
                    Nhấn "Gửi đánh giá" để nhận nhận xét tổng thể từ AI về bản dịch của bạn.
                </div>
                <div class="overall-actions">
                    <button class="action-btn new-exercise-btn" id="new-exercise-btn">
                        <i class="fas fa-sync-alt"></i> Bài Tập Mới
                    </button>
                    <button class="action-btn submit-all-btn" id="submit-all-btn">
                        <i class="fas fa-paper-plane"></i> Gửi Đánh Giá
                    </button>
                </div>
            </div>
        </div>

        <div class="results-summary" id="results-summary">
            <h2 class="results-title">Kết Quả Tổng Hợp</h2>
            <div class="results-content">
                <div class="original-text">
                    <h3>Bài viết gốc:</h3>
                    <div id="original-summary"></div>
                </div>
                <div class="translated-text">
                    <h3>Bản dịch của bạn:</h3>
                    <div id="translation-summary"></div>
                </div>
            </div>
        </div>
        
        <div class="notification" id="notification"></div>
    </div>

    <script>
        // DOM Elements
        const apiKeyInput = document.getElementById('api-key');
        const saveApiKeyBtn = document.getElementById('save-api-key');
        const levelOptions = document.querySelectorAll('.level-options .option');
        const typeOptions = document.querySelectorAll('.type-options .option');
        const startPracticeBtn = document.getElementById('start-practice');
        const exercisesSection = document.getElementById('exercises-section');
        const exercisesList = document.getElementById('exercises-list');
        const practiceSection = document.getElementById('practice-section');
        const vietnameseTextEl = document.getElementById('vietnamese-text');
        const exerciseTitle = document.getElementById('exercise-title');
        const exerciseLevel = document.getElementById('exercise-level');
        const exerciseType = document.getElementById('exercise-type');
        const currentSentenceEl = document.getElementById('current-sentence');
        const currentTranslationEl = document.getElementById('current-translation');
        const feedbackSection = document.getElementById('feedback-section');
        const feedbackContentEl = document.getElementById('feedback-content');
        const hintBtn = document.getElementById('hint-btn');
        const submitBtn = document.getElementById('submit-btn');
        const nextBtn = document.getElementById('next-btn');
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');
        const overallFeedbackContainer = document.getElementById('overall-feedback-container');
        const overallFeedback = document.getElementById('overall-feedback');
        const newExerciseBtn = document.getElementById('new-exercise-btn');
        const submitAllBtn = document.getElementById('submit-all-btn');
        const apiKeyError = document.getElementById('api-key-error');
        const resultsSummary = document.getElementById('results-summary');
        const originalSummary = document.getElementById('original-summary');
        const translationSummary = document.getElementById('translation-summary');
        const notification = document.getElementById('notification');
        const debugPanel = document.getElementById('debug-panel');
        const debugToggle = document.getElementById('debug-toggle');
        const debugContent = document.getElementById('debug-content');
        
        // App State
        let selectedLevel = null;
        let selectedType = null;
        let apiKey = null;
        let currentText = "";
        let sentences = [];
        let userTranslations = [];
        let currentSentenceIndex = 0;
        let generatedExercises = [];
        let selectedExercise = null;

        // Gemini API Endpoint
        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
        
        // Configure Marked.js
        marked.setOptions({
            breaks: true,
            gfm: true
        });

        // Predefined exercises - stored in JSON format
        const exercisesData = {
            beginner: {
                emails: [
                    { title: "Cảm ơn vì món quà", id: "email1" },
                    { title: "Kế hoạch cuối tuần", id: "email2" },
                    { title: "Lời mời dự tiệc", id: "email3" }
                ],
                diaries: [
                    { title: "Ngày đầu tiên đi học", id: "diary1" },
                    { title: "Chuyến đi dã ngoại", id: "diary2" },
                    { title: "Ngày sinh nhật đáng nhớ", id: "diary3" }
                ],
                essays: [
                    { title: "Người bạn thân nhất của tôi", id: "essay1" },
                    { title: "Mùa yêu thích trong năm", id: "essay2" },
                    { title: "Lợi ích của việc đọc sách", id: "essay3" }
                ],
                articles: [
                    { title: "Cách chăm sóc thú cưng", id: "article1" },
                    { title: "Mẹo tiết kiệm năng lượng", id: "article2" },
                    { title: "Lợi ích của việc tập thể dục", id: "article3" }
                ],
                stories: [
                    { title: "Chú chó thông minh", id: "story1" },
                    { title: "Cuộc phiêu lưu trong rừng", id: "story2" },
                    { title: "Chiếc đồng hồ kỳ diệu", id: "story3" }
                ],
                reports: [
                    { title: "Báo cáo thời tiết tuần", id: "report1" },
                    { title: "Kết quả học tập học kỳ", id: "report2" },
                    { title: "Báo cáo hoạt động câu lạc bộ", id: "report3" }
                ]
            },
            intermediate: {
                emails: [
                    { title: "Đề nghị hợp tác kinh doanh", id: "email4" },
                    { title: "Phản hồi về sản phẩm", id: "email5" },
                    { title: "Thư xin lỗi khách hàng", id: "email6" }
                ],
                diaries: [
                    { title: "Trải nghiệm du lịch nước ngoài", id: "diary4" },
                    { title: "Ngày đầu tiên đi làm", id: "diary5" },
                    { title: "Kỷ niệm đáng nhớ với gia đình", id: "diary6" }
                ],
                essays: [
                    { title: "Tác động của công nghệ với xã hội", id: "essay4" },
                    { title: "Vai trò của giáo dục trong cuộc sống", id: "essay5" },
                    { title: "Lối sống lành mạnh cho giới trẻ", id: "essay6" }
                ],
                articles: [
                    { title: "Xu hướng công nghệ năm 2025", id: "article4" },
                    { title: "Bảo vệ môi trường đại dương", id: "article5" },
                    { title: "Phát triển bền vững trong nông nghiệp", id: "article6" }
                ],
                stories: [
                    { title: "Hành trình tìm lại bản thân", id: "story4" },
                    { title: "Bí mật ngôi nhà cổ", id: "story5" },
                    { title: "Cuộc gặp gỡ định mệnh", id: "story6" }
                ],
                reports: [
                    { title: "Báo cáo thị trường tài chính", id: "report4" },
                    { title: "Phân tích hiệu quả chiến dịch marketing", id: "report5" },
                    { title: "Đánh giá hiệu suất nhân viên", id: "report6" }
                ]
            },
            advanced: {
                emails: [
                    { title: "Đề xuất dự án đầu tư", id: "email7" },
                    { title: "Thương lượng hợp đồng", id: "email8" },
                    { title: "Thư giới thiệu sản phẩm mới", id: "email9" }
                ],
                diaries: [
                    { title: "Hành trình chinh phục đỉnh núi", id: "diary7" },
                    { title: "Trải nghiệm sống ở nước ngoài", id: "diary8" },
                    { title: "Suy ngẫm về cuộc sống hiện đại", id: "diary9" }
                ],
                essays: [
                    { title: "Triết lý về hạnh phúc trong đời sống", id: "essay7" },
                    { title: "Tác động của toàn cầu hóa", id: "essay8" },
                    { title: "Tương lai của trí tuệ nhân tạo", id: "essay9" }
                ],
                articles: [
                    { title: "Công nghệ blockchain và ứng dụng thực tế", id: "article7" },
                    { title: "Chính sách kinh tế vĩ mô trong thời kỳ biến động", id: "article8" },
                    { title: "Tiến bộ trong nghiên cứu y sinh học", id: "article9" }
                ],
                stories: [
                    { title: "Hành trình khám phá vũ trụ", id: "story7" },
                    { title: "Bí ẩn thành phố cổ đại", id: "story8" },
                    { title: "Cuộc cách mạng khoa học viễn tưởng", id: "story9" }
                ],
                reports: [
                    { title: "Báo cáo nghiên cứu thị trường toàn cầu", id: "report7" },
                    { title: "Phân tích xu hướng đầu tư dài hạn", id: "report8" },
                    { title: "Đánh giá tác động môi trường dự án", id: "report9" }
                ]
            }
        };

        // Show notification
        function showNotification(message, isError = true) {
            notification.textContent = message;
            notification.style.backgroundColor = isError ? '#e74c3c' : '#2ecc71';
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 5000);
        }

        // Load saved API key if exists
        window.addEventListener('DOMContentLoaded', () => {
            const savedApiKey = localStorage.getItem('gemini_api_key');
            if (savedApiKey) {
                apiKeyInput.value = savedApiKey;
                apiKey = savedApiKey;
                startPracticeBtn.disabled = false;
            }
        });

        // Save API key
        saveApiKeyBtn.addEventListener('click', () => {
            apiKey = apiKeyInput.value.trim();
            if (apiKey) {
                localStorage.setItem('gemini_api_key', apiKey);
                startPracticeBtn.disabled = false;
                apiKeyError.style.display = 'none';
                showNotification('API key đã được lưu thành công!', false);
            } else {
                apiKeyError.textContent = 'Vui lòng nhập API key hợp lệ.';
                apiKeyError.style.display = 'block';
            }
        });

        // Select level
        levelOptions.forEach(option => {
            option.addEventListener('click', () => {
                levelOptions.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                selectedLevel = option.getAttribute('data-level');
                checkSelections();
            });
        });

        // Select type
        typeOptions.forEach(option => {
            option.addEventListener('click', () => {
                typeOptions.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                selectedType = option.getAttribute('data-type');
                checkSelections();
            });
        });

        // Enable start button when both selections are made
        function checkSelections() {
            if (selectedLevel && selectedType && apiKey) {
                startPracticeBtn.disabled = false;
            }
        }

        // Start practice - load predefined exercises
        startPracticeBtn.addEventListener('click', async () => {
            startPracticeBtn.innerHTML = '<span class="loading"></span> Đang tải bài tập...';
            startPracticeBtn.disabled = true;
            
            try {
                // Get exercises for selected level and type
                const exercises = exercisesData[selectedLevel][selectedType];
                
                if (!exercises || exercises.length === 0) {
                    throw new Error("Không tìm thấy bài tập phù hợp");
                }
                
                generatedExercises = exercises;
                renderExercisesList();
                
                // Show exercises list
                exercisesSection.style.display = 'block';
                startPracticeBtn.innerHTML = '<i class="fas fa-play"></i> Tải Bài Tập';
                startPracticeBtn.disabled = false;
                
                // Scroll to exercises section
                exercisesSection.scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                console.error('Error loading exercises:', error);
                showNotification('Có lỗi xảy ra khi tải bài tập. Vui lòng thử lại.');
                startPracticeBtn.innerHTML = '<i class="fas fa-play"></i> Tải Bài Tập';
                startPracticeBtn.disabled = false;
                logDebugInfo("Lỗi tải bài tập", error.message);
            }
        });

        // Render exercises list
        function renderExercisesList() {
            exercisesList.innerHTML = '';
            
            generatedExercises.forEach((exercise, index) => {
                const exerciseCard = document.createElement('div');
                exerciseCard.className = 'exercise-card';
                exerciseCard.dataset.index = index;
                
                exerciseCard.innerHTML = `
                    <h3><i class="fas fa-file-alt"></i> ${exercise.title}</h3>
                    <p>Bài tập ${selectedType} ở mức độ ${selectedLevel}. Nhấn để bắt đầu luyện dịch.</p>
                    <div class="exercise-meta">
                        <div class="exercise-tag">${selectedLevel}</div>
                        <div class="exercise-tag">${selectedType}</div>
                    </div>
                `;
                
                exerciseCard.addEventListener('click', () => {
                    document.querySelectorAll('.exercise-card').forEach(card => {
                        card.classList.remove('selected');
                    });
                    exerciseCard.classList.add('selected');
                    selectedExercise = index;
                    
                    // Start exercise after 500ms
                    setTimeout(() => {
                        startSelectedExercise();
                    }, 500);
                });
                
                exercisesList.appendChild(exerciseCard);
            });
        }

        // Hàm ghi log debug
        function logDebugInfo(title, content) {
            debugContent.innerHTML += `\n\n=== ${title} ===\n`;
            
            if (typeof content === 'object') {
                debugContent.innerHTML += JSON.stringify(content, null, 2);
            } else {
                debugContent.innerHTML += content;
            }
            
            debugPanel.style.display = 'block';
        }
        
        debugToggle.addEventListener('click', () => {
            const isVisible = debugContent.style.display !== 'none';
            debugContent.style.display = isVisible ? 'none' : 'block';
            debugToggle.innerHTML = isVisible 
                ? '<i class="fas fa-bug"></i> Hiển thị thông tin gỡ lỗi' 
                : '<i class="fas fa-bug"></i> Ẩn thông tin gỡ lỗi';
        });

        // Start selected exercise
        async function startSelectedExercise() {
            if (selectedExercise === null) return;
            
            const exercise = generatedExercises[selectedExercise];
            exerciseTitle.textContent = exercise.title;
            exerciseLevel.textContent = selectedLevel.charAt(0).toUpperCase() + selectedLevel.slice(1);
            exerciseType.textContent = selectedType.charAt(0).toUpperCase() + selectedType.slice(1);
            
            try {
                // Generate exercise content using Gemini
                const prompt = `Hãy tạo một bài viết ngắn khoảng 10-12 câu với tiêu đề: "${exercise.title}" 
                bằng tiếng Việt, phù hợp với mức độ ${selectedLevel} và thể loại ${selectedType}. 
                Bài viết nên có nội dung liên quan đến tiêu đề và phù hợp với ngữ cảnh.`;
                
                currentText = await callGeminiAPI(prompt);
                vietnameseTextEl.textContent = currentText;
                
                // Split text into sentences
                sentences = splitTextIntoSentences(currentText);
                
                // Reset translations
                userTranslations = new Array(sentences.length).fill('');
                currentSentenceIndex = 0;
                
                // Hide exercises, show practice section
                exercisesSection.style.display = 'none';
                practiceSection.style.display = 'block';
                overallFeedbackContainer.style.display = 'none';
                resultsSummary.style.display = 'none';
                
                // Scroll to practice section
                practiceSection.scrollIntoView({ behavior: 'smooth' });
                
                // Start with first sentence
                displayCurrentSentence();
                
                // Focus vào ô dịch tự động
                setTimeout(() => {
                    currentTranslationEl.focus();
                }, 300);
                
            } catch (error) {
                console.error('Error generating exercise content:', error);
                showNotification('Có lỗi khi tạo nội dung bài tập. Vui lòng thử lại.');
                logDebugInfo("Lỗi tạo nội dung bài tập", error.message);
            }
        }

        // Display current sentence
        function displayCurrentSentence() {
            // Highlight current sentence in the text
            const sentence = sentences[currentSentenceIndex];
            const highlightedText = sentences.map((s, i) => {
                if (i === currentSentenceIndex) {
                    return `<span class="current-sentence">${s}</span>`;
                }
                return s;
            }).join(' ');
            
            vietnameseTextEl.innerHTML = highlightedText;
            
            // Display current sentence for translation
            currentSentenceEl.textContent = sentence;
            currentTranslationEl.value = userTranslations[currentSentenceIndex] || '';
            
            // Clear feedback
            feedbackSection.style.display = 'none';
            feedbackContentEl.innerHTML = '';
            
            // Update progress
            const progressPercent = ((currentSentenceIndex + 1) / sentences.length) * 100;
            progressBar.style.width = `${progressPercent}%`;
            progressText.textContent = `Câu ${currentSentenceIndex + 1}/${sentences.length}`;
            
            // Scroll to current sentence
            const currentSentenceElement = vietnameseTextEl.querySelector('.current-sentence');
            if (currentSentenceElement) {
                currentSentenceElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // Call Gemini API
        async function callGeminiAPI(prompt) {
            try {
                const response = await axios.post(
                    `${GEMINI_API_URL}?key=${apiKey}`,
                    {
                        contents: [{
                            parts: [{
                                text: prompt
                            }]
                        }]
                    },
                    {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }
                );
                
                return response.data.candidates[0].content.parts[0].text;
            } catch (error) {
                console.error('Gemini API Error:', error);
                if (error.response && error.response.data) {
                    console.error('API Error Details:', error.response.data);
                    if (error.response.data.error && error.response.data.error.message) {
                        throw new Error(`Gemini API: ${error.response.data.error.message}`);
                    }
                }
                throw new Error('Lỗi khi kết nối với Gemini API');
            }
        }

        // Split text into sentences
        function splitTextIntoSentences(text) {
            // Improved sentence splitting
            return text.split(/(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?|\!|…)\s/);
        }

        // Show hint for current sentence (only keywords)
        async function showHint() {
            const sentence = sentences[currentSentenceIndex];
            if (!sentence) return;
            
            // Get hint from Gemini
            try {
                hintBtn.innerHTML = '<span class="loading"></span> Đang tạo gợi ý...';
                hintBtn.disabled = true;
                
                const prompt = `Hãy đưa ra gợi ý dịch câu sau sang tiếng Anh: "${sentence}". 
                Gợi ý chỉ nên là các từ khóa, cụm từ quan trọng (tối đa 3-5 từ/cụm từ) cần dùng để dịch câu này, 
                không đưa ra cả câu dịch hoàn chỉnh. 
                Trả lời bằng một mảng JSON: { "hints": [ "từ 1", "từ 2", ... ] }`;
                
                const response = await callGeminiAPI(prompt);
                
                // Try to parse JSON response
                let hints = ["Không thể phân tích gợi ý"];
                try {
                    const jsonResponse = JSON.parse(response);
                    if (jsonResponse.hints && Array.isArray(jsonResponse.hints)) {
                        hints = jsonResponse.hints;
                    }
                } catch (e) {
                    console.error('Error parsing hints JSON:', e);
                    // If JSON parsing fails, try to extract hints from text
                    const matches = response.match(/"([^"]+)"/g);
                    if (matches) {
                        hints = matches.map(m => m.replace(/"/g, ''));
                    }
                }
                
                // Display hints
                feedbackContentEl.innerHTML = `
                    <p><strong>Gợi ý từ khóa:</strong></p>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px; margin-top: 10px;">
                        ${hints.map(hint => `<span style="background: #e8f4fc; padding: 5px 10px; border-radius: 20px;">${hint}</span>`).join('')}
                    </div>
                    <p style="margin-top: 15px; font-size: 0.9em; color: #6c757d;">
                        <i class="fas fa-info-circle"></i> Sử dụng các từ khóa này để xây dựng câu dịch của bạn.
                    </p>
                `;
                feedbackSection.style.display = 'block';
                
                hintBtn.innerHTML = '<i class="fas fa-lightbulb"></i> Gợi ý từ khóa';
                hintBtn.disabled = false;
                
            } catch (error) {
                console.error('Error getting hint:', error);
                feedbackContentEl.innerHTML = "<p>Không thể tạo gợi ý. Vui lòng thử lại.</p>";
                feedbackSection.style.display = 'block';
                
                hintBtn.innerHTML = '<i class="fas fa-lightbulb"></i> Gợi ý từ khóa';
                hintBtn.disabled = false;
            }
        }

        // Submit current translation for review
        async function submitTranslation() {
            const userTranslation = currentTranslationEl.value.trim();
            const sentence = sentences[currentSentenceIndex];
            
            if (!userTranslation) {
                feedbackContentEl.innerHTML = "<p>Vui lòng nhập bản dịch trước khi kiểm tra.</p>";
                feedbackSection.style.display = 'block';
                return;
            }
            
            // Save user translation
            userTranslations[currentSentenceIndex] = userTranslation;
            
            // Get feedback from Gemini
            try {
                submitBtn.innerHTML = '<span class="loading"></span> Đang kiểm tra...';
                submitBtn.disabled = true;
                
                const prompt = `Hãy đánh giá bản dịch sau của câu tiếng Việt sang tiếng Anh. 
                Trả lời bằng tiếng Việt, ngắn gọn (dưới 100 từ), tập trung vào độ chính xác và tự nhiên.
                Sử dụng định dạng markdown để làm rõ các điểm quan trọng.
                Câu gốc: "${sentence}"
                Bản dịch: "${userTranslation}"`;
                
                const feedback = await callGeminiAPI(prompt);
                
                feedbackContentEl.innerHTML = marked.parse(feedback);
                feedbackSection.style.display = 'block';
                
                submitBtn.innerHTML = '<i class="fas fa-check"></i> Kiểm tra';
                submitBtn.disabled = false;
                
            } catch (error) {
                console.error('Error getting feedback:', error);
                feedbackContentEl.innerHTML = "<p>Không thể kiểm tra bản dịch. Vui lòng thử lại.</p>";
                feedbackSection.style.display = 'block';
                
                submitBtn.innerHTML = '<i class="fas fa-check"></i> Kiểm tra';
                submitBtn.disabled = false;
            }
        }

        // Go to next sentence
        function goToNextSentence() {
            if (currentSentenceIndex < sentences.length - 1) {
                currentSentenceIndex++;
                displayCurrentSentence();
            } else {
                // All sentences completed
                overallFeedbackContainer.style.display = 'block';
                overallFeedbackContainer.scrollIntoView({ behavior: 'smooth' });
            }
        }

        // Submit all for overall feedback
        submitAllBtn.addEventListener('click', async () => {
            // Get overall feedback from Gemini
            try {
                submitAllBtn.innerHTML = '<span class="loading"></span> Đang tạo đánh giá...';
                submitAllBtn.disabled = true;
                
                const fullTranslation = userTranslations.join(' ');
                const prompt = `Hãy đánh giá tổng thể bản dịch sau từ tiếng Việt sang tiếng Anh. 
                Văn bản gốc: "${currentText}"
                Bản dịch: "${fullTranslation}"
                Trả lời bằng tiếng Việt, khoảng 200-300 từ, sử dụng định dạng markdown để trình bày rõ ràng.
                Bao gồm:
                - **Điểm tốt**: Liệt kê những điểm tốt trong bản dịch
                - **Điểm cần cải thiện**: Liệt kê những điểm cần cải thiện
                - **Gợi ý**: Đưa ra gợi ý để cải thiện bản dịch
                - **Điểm số**: Cho điểm từ 1-10 với giải thích ngắn gọn`;
                
                const feedback = await callGeminiAPI(prompt);
                
                overallFeedback.innerHTML = marked.parse(feedback);
                submitAllBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Gửi Đánh Giá';
                submitAllBtn.disabled = false;
                
                // Show results summary
                showResultsSummary();
                
            } catch (error) {
                console.error('Error getting overall feedback:', error);
                overallFeedback.innerHTML = "<p>Không thể tạo đánh giá tổng thể. Vui lòng thử lại.</p>";
                submitAllBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Gửi Đánh Giá';
                submitAllBtn.disabled = false;
            }
        });

        // Show results summary
        function showResultsSummary() {
            resultsSummary.style.display = 'block';
            
            // Format original text with sentence numbers
            const originalWithNumbers = sentences.map((sentence, index) => 
                `<p><strong>${index + 1}.</strong> ${sentence}</p>`
            ).join('');
            
            // Format translations with sentence numbers
            const translationWithNumbers = userTranslations.map((translation, index) => 
                `<p><strong>${index + 1}.</strong> ${translation}</p>`
            ).join('');
            
            originalSummary.innerHTML = originalWithNumbers;
            translationSummary.innerHTML = translationWithNumbers;
            
            resultsSummary.scrollIntoView({ behavior: 'smooth' });
        }

        // New exercise
        newExerciseBtn.addEventListener('click', () => {
            exercisesSection.style.display = 'block';
            practiceSection.style.display = 'none';
            resultsSummary.style.display = 'none';
            exercisesSection.scrollIntoView({ behavior: 'smooth' });
        });

        // Event listeners
        hintBtn.addEventListener('click', showHint);
        submitBtn.addEventListener('click', submitTranslation);
        nextBtn.addEventListener('click', goToNextSentence);
        
        // Setup keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Phím Tab - focus vào ô dịch
            if (e.key === 'Tab') {
                e.preventDefault();
                currentTranslationEl.focus();
            }
            
            // Phím H - gợi ý
            if (e.key.toLowerCase() === 'h' && 
                document.activeElement.tagName !== 'INPUT' && 
                document.activeElement.tagName !== 'TEXTAREA') {
                e.preventDefault();
                showHint();
            }
        });
        
        currentTranslationEl.addEventListener('keydown', function(e) {
            // Enter - kiểm tra
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                submitTranslation();
            }
            
            // Shift + Enter - chuyển câu tiếp theo
            if (e.key === 'Enter' && e.shiftKey) {
                e.preventDefault();
                goToNextSentence();
            }
        });
    </script>
</body>
</html>